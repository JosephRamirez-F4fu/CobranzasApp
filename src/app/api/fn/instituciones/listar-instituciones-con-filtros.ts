/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { ApiResponsePageInstitutionResponse } from '../../models/api-response-page-institution-response';

export interface ListarInstitucionesConFiltros$Params {

/**
 * Número de página
 */
  page?: number;

/**
 * Cantidad de elementos por página
 */
  size?: number;

/**
 * Configuración de ordenamiento en formato JSON
 */
  sort?: string;

/**
 * Filtrar por nombre de institución
 */
  name?: string;

/**
 * Filtrar por correo de contacto
 */
  email?: string;

/**
 * Filtrar por código de institución
 */
  code?: string;

/**
 * Filtrar por uso de LDAP
 */
  useLdap?: boolean;

/**
 * Filtrar por entorno de producción
 */
  production?: boolean;
}

export function listarInstitucionesConFiltros(http: HttpClient, rootUrl: string, params?: ListarInstitucionesConFiltros$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponsePageInstitutionResponse>> {
  const rb = new RequestBuilder(rootUrl, listarInstitucionesConFiltros.PATH, 'get');
  if (params) {
    rb.query('page', params.page, {});
    rb.query('size', params.size, {});
    rb.query('sort', params.sort, {});
    rb.query('name', params.name, {});
    rb.query('email', params.email, {});
    rb.query('code', params.code, {});
    rb.query('useLdap', params.useLdap, {});
    rb.query('production', params.production, {});
  }

  return http.request(
    rb.build({ responseType: 'blob', accept: '*/*', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<ApiResponsePageInstitutionResponse>;
    })
  );
}

listarInstitucionesConFiltros.PATH = '/institutions';
