/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { ApiResponsePageCuentaResponse } from '../../models/api-response-page-cuenta-response';

export interface ListarEstadosDeCuentaConFiltros$Params {

/**
 * Número de página
 */
  page?: number;

/**
 * Cantidad de registros por página
 */
  size?: number;

/**
 * Configuración de ordenamiento en formato JSON
 */
  sort?: string;

/**
 * Filtrar por periodo académico
 */
  periodoAcademico?: string;

/**
 * Filtrar por estado de la cuenta
 */
  estado?: 'PENDIENTE' | 'PAGADO' | 'ANULADO' | 'VENCIDO';

/**
 * Filtrar por identificador de alumno
 */
  alumnoId?: number;

/**
 * Filtrar por identificador de cronograma
 */
  cronogramaId?: number;
}

export function listarEstadosDeCuentaConFiltros(http: HttpClient, rootUrl: string, params?: ListarEstadosDeCuentaConFiltros$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponsePageCuentaResponse>> {
  const rb = new RequestBuilder(rootUrl, listarEstadosDeCuentaConFiltros.PATH, 'get');
  if (params) {
    rb.query('page', params.page, {});
    rb.query('size', params.size, {});
    rb.query('sort', params.sort, {});
    rb.query('periodoAcademico', params.periodoAcademico, {});
    rb.query('estado', params.estado, {});
    rb.query('alumnoId', params.alumnoId, {});
    rb.query('cronogramaId', params.cronogramaId, {});
  }

  return http.request(
    rb.build({ responseType: 'blob', accept: '*/*', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<ApiResponsePageCuentaResponse>;
    })
  );
}

listarEstadosDeCuentaConFiltros.PATH = '/estado-cuenta';
